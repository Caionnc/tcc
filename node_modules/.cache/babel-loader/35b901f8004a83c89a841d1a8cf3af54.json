{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\n\nvar NativeStorageOriginal = function (_super) {\n  __extends(NativeStorageOriginal, _super);\n\n  function NativeStorageOriginal() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NativeStorageOriginal.prototype.initWithSuiteName = function (reference) {\n    return cordova(this, \"initWithSuiteName\", {\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  NativeStorageOriginal.prototype.setItem = function (reference, value) {\n    return cordova(this, \"setItem\", {}, arguments);\n  };\n\n  NativeStorageOriginal.prototype.getItem = function (reference) {\n    return cordova(this, \"getItem\", {}, arguments);\n  };\n\n  NativeStorageOriginal.prototype.keys = function () {\n    return cordova(this, \"keys\", {}, arguments);\n  };\n\n  NativeStorageOriginal.prototype.remove = function (reference) {\n    return cordova(this, \"remove\", {}, arguments);\n  };\n\n  NativeStorageOriginal.prototype.clear = function () {\n    return cordova(this, \"clear\", {}, arguments);\n  };\n\n  NativeStorageOriginal.pluginName = \"NativeStorage\";\n  NativeStorageOriginal.plugin = \"cordova-plugin-nativestorage\";\n  NativeStorageOriginal.pluginRef = \"NativeStorage\";\n  NativeStorageOriginal.repo = \"https://github.com/TheCocoaProject/cordova-plugin-nativestorage\";\n  NativeStorageOriginal.platforms = [\"Android\", \"Browser\", \"iOS\", \"macOS\", \"Windows\"];\n  return NativeStorageOriginal;\n}(IonicNativePlugin);\n\nvar NativeStorage = new NativeStorageOriginal();\nexport { NativeStorage };","map":{"version":3,"sources":["../../../../src/@ionic-native/plugins/native-storage/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAO,iBAAP,EAAO,OAAP,QAAmD,oBAAnD;;;AAoCmC,EAAA,SAAA,CAAA,qBAAA,EAAiB,MAAjB,CAAA;;;;;;AASjC,EAAA,qBAAA,CAAA,SAAA,CAAA,iBAAA,GAAiB,UAAC,SAAD,EAAkB;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,mBAAA,EAAA;AAAA,mBAAA,CAAA,KAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAnC;;AAWA,EAAA,qBAAA,CAAA,SAAA,CAAO,OAAP,GAAO,UAAC,SAAD,EAA8B,KAA9B,EAA8B;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,SAAA,CAAA;AAAA,GAArC;;AAUA,EAAA,qBAAA,CAAA,SAAA,CAAO,OAAP,GAAO,UAAC,SAAD,EAAkB;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,SAAA,EAAA,EAAA,EAAA,SAAA,CAAA;AAAA,GAAzB;;AASA,EAAA,qBAAA,CAAA,SAAA,CAAI,IAAJ,GAAI,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,MAAA,EAAA,EAAA,EAAA,SAAA,CAAA;AAAA,GAAJ;;AAUA,EAAA,qBAAA,CAAA,SAAA,CAAM,MAAN,GAAM,UAAC,SAAD,EAAkB;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,QAAA,EAAA,EAAA,EAAA,SAAA,CAAA;AAAA,GAAxB;;AASA,EAAA,qBAAA,CAAA,SAAA,CAAK,KAAL,GAAK,YAAA;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,OAAA,EAAA,EAAA,EAAA,SAAA,CAAA;AAAA,GAAL;;;;;;;SA/FF,qB;EAqCmC,iB;;IAAtB,aAAA,GAAA,IAAa,qBAAb,E","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\n/**\n * @name Native Storage\n * @premier nativestorage\n * @description Native storage of variables in Android and iOS\n *\n * @usage\n * ```typescript\n * import { NativeStorage } from '@ionic-native/native-storage/ngx';\n *\n * constructor(private nativeStorage: NativeStorage) { }\n *\n * ...\n *\n * this.nativeStorage.setItem('myitem', {property: 'value', anotherProperty: 'anotherValue'})\n *   .then(\n *     () => console.log('Stored item!'),\n *     error => console.error('Error storing item', error)\n *   );\n *\n * this.nativeStorage.getItem('myitem')\n *   .then(\n *     data => console.log(data),\n *     error => console.error(error)\n *   );\n * ```\n */\n@Plugin({\n  pluginName: 'NativeStorage',\n  plugin: 'cordova-plugin-nativestorage',\n  pluginRef: 'NativeStorage',\n  repo: 'https://github.com/TheCocoaProject/cordova-plugin-nativestorage',\n  platforms: ['Android', 'Browser', 'iOS', 'macOS', 'Windows'],\n})\n@Injectable()\nexport class NativeStorage extends IonicNativePlugin {\n  /**\n   * Initialises shared storage with the suite name when using app groups in iOS\n   * @param reference {string}\n   * @returns {Promise<void>}\n   */\n  @Cordova({\n    platforms: ['iOS'],\n  })\n  initWithSuiteName(reference: string): Promise<void> {\n    return;\n  }\n\n  /**\n   * Stores a value\n   * @param reference {string}\n   * @param value\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  setItem(reference: string, value: any): Promise<any> {\n    return;\n  }\n\n  /**\n   * Gets a stored item\n   * @param reference {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  getItem(reference: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Retrieving all keys\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  keys(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Removes a single stored item\n   * @param reference {string}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  remove(reference: string): Promise<any> {\n    return;\n  }\n\n  /**\n   * Removes all stored values.\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  clear(): Promise<any> {\n    return;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}