{"ast":null,"code":"var _jsxFileName = \"/home/caionnc/Documents/CC_UFPB/TCC/vlibras-mobile-cross-platform/src/hooks/Translation.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { createContext, useContext, useState, useCallback, useEffect } from 'react';\nimport { NativeStorage } from '@ionic-native/native-storage';\nimport { SocialSharing } from '@ionic-native/social-sharing/';\nimport { ErrorModal, GenerateModal } from 'components';\nimport { fetchVideoStatus, generateVideoTranslate, translate, VideoTranslationStatus } from 'services/translate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst TranslationContext = /*#__PURE__*/createContext({});\n\nconst poll = ({\n  fn,\n  validate,\n  interval,\n  maxAttempts\n}) => {\n  let attempts = 0;\n\n  const executePoll = async (resolve, reject) => {\n    const result = await fn();\n    attempts += 1;\n\n    if (validate(result.status)) {\n      return resolve(result);\n    }\n\n    if (maxAttempts && attempts === maxAttempts || result.status === VideoTranslationStatus.FAILED) {\n      return reject(new Error('Exceeded max attempts'));\n    }\n\n    return setTimeout(executePoll, interval, resolve, reject);\n  };\n\n  return new Promise(executePoll);\n};\n\nconst POLL_INTERVAL = 5000;\nconst MAX_ATTEMPTS = 50;\nconst URL_API = 'https://traducao2.vlibras.gov.br/video/download';\nconst MAX_RECENTS_WORD = 30;\nconst PROPERTY_KEY = 'recents-dictionary';\n\nconst TranslationProvider = ({\n  children\n}) => {\n  _s();\n\n  const [errorModalVisible, setErrorModalVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [textPtBr, setTextPtBr] = useState('');\n  const [textGloss, setTextGloss] = useState('');\n  const [recentTranslation, setRecentTranslation] = useState([]);\n  useEffect(() => {\n    NativeStorage.getItem(PROPERTY_KEY).then(recents => setRecentTranslation(recents)).catch(_ => false);\n  }, []);\n\n  function handleShareVideo(uuid) {\n    setLoading(true); // Move this function to a service [MA]\n\n    SocialSharing.share('', '', `${URL_API}/${uuid}`).catch(_ => false) // TODO: Enable error modal if fails [MA]\n    .finally(() => setLoading(false));\n  }\n\n  async function generateVideo() {\n    setLoading(true);\n\n    try {\n      const gloss = await translate({\n        text: textPtBr\n      });\n      const response = await generateVideoTranslate({\n        gloss\n      });\n      const uuid = response.requestUID;\n      poll({\n        fn: () => fetchVideoStatus(uuid),\n        validate: status => status === VideoTranslationStatus.GENERATED,\n        interval: POLL_INTERVAL,\n        maxAttempts: MAX_ATTEMPTS\n      }).then(() => handleShareVideo(uuid)).catch(() => {\n        setLoading(false);\n        setErrorModalVisible(true);\n      });\n    } catch {\n      setLoading(false);\n      setErrorModalVisible(true);\n    }\n  }\n\n  const handleTextPtBr = useCallback(async (text, fromDictionary) => {\n    if (fromDictionary) {\n      const recents = recentTranslation.length <= MAX_RECENTS_WORD ? [text, ...recentTranslation.filter(item => item !== text)] : [text, ...recentTranslation.slice(0, -1).filter(item => item !== text)];\n      setRecentTranslation(recents);\n      NativeStorage.setItem(PROPERTY_KEY, recents);\n    }\n\n    setTextPtBr(text);\n\n    try {\n      const gloss = await translate({\n        text\n      });\n      setTextGloss(gloss);\n      return gloss;\n    } catch {// don't need\n    }\n\n    return text;\n  }, [recentTranslation]);\n  const handleTextGloss = useCallback(async (gloss, fromDictionary) => {\n    if (fromDictionary) {\n      const recents = recentTranslation.length <= MAX_RECENTS_WORD ? [gloss, ...recentTranslation.filter(item => item !== gloss)] : [gloss, ...recentTranslation.slice(0, -1).filter(item => item !== gloss)];\n      setRecentTranslation(recents);\n      NativeStorage.setItem(PROPERTY_KEY, recents);\n    }\n\n    setTextGloss(gloss);\n  }, [recentTranslation]);\n  return /*#__PURE__*/_jsxDEV(TranslationContext.Provider, {\n    value: {\n      textPtBr,\n      textGloss,\n      setTextPtBr: handleTextPtBr,\n      setTextGloss: handleTextGloss,\n      recentTranslation,\n      generateVideo\n    },\n    children: [children, /*#__PURE__*/_jsxDEV(GenerateModal, {\n      visible: loading,\n      setVisible: setLoading\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 175,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ErrorModal, {\n      errorMsg: \"Erro ao gerar v\\xEDdeo\",\n      show: errorModalVisible,\n      setShow: setErrorModalVisible\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 176,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 164,\n    columnNumber: 5\n  }, this);\n};\n\n_s(TranslationProvider, \"knPde1ccxteFQdKFzggKImAafoM=\");\n\n_c = TranslationProvider;\n\nfunction useTranslation() {\n  _s2();\n\n  const context = useContext(TranslationContext);\n\n  if (!context) {\n    throw new Error('');\n  }\n\n  return context;\n}\n\n_s2(useTranslation, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\nexport { TranslationContext, TranslationProvider, useTranslation };\n\nvar _c;\n\n$RefreshReg$(_c, \"TranslationProvider\");","map":{"version":3,"sources":["/home/caionnc/Documents/CC_UFPB/TCC/vlibras-mobile-cross-platform/src/hooks/Translation.tsx"],"names":["React","createContext","useContext","useState","useCallback","useEffect","NativeStorage","SocialSharing","ErrorModal","GenerateModal","fetchVideoStatus","generateVideoTranslate","translate","VideoTranslationStatus","TranslationContext","poll","fn","validate","interval","maxAttempts","attempts","executePoll","resolve","reject","result","status","FAILED","Error","setTimeout","Promise","POLL_INTERVAL","MAX_ATTEMPTS","URL_API","MAX_RECENTS_WORD","PROPERTY_KEY","TranslationProvider","children","errorModalVisible","setErrorModalVisible","loading","setLoading","textPtBr","setTextPtBr","textGloss","setTextGloss","recentTranslation","setRecentTranslation","getItem","then","recents","catch","_","handleShareVideo","uuid","share","finally","generateVideo","gloss","text","response","requestUID","GENERATED","handleTextPtBr","fromDictionary","length","filter","item","slice","setItem","handleTextGloss","useTranslation","context"],"mappings":"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","sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, {\n  createContext,\n  useContext,\n  useState,\n  useCallback,\n  useEffect,\n} from 'react';\n\nimport { NativeStorage } from '@ionic-native/native-storage';\nimport { SocialSharing } from '@ionic-native/social-sharing/';\n\nimport { ErrorModal, GenerateModal } from 'components';\nimport {\n  fetchVideoStatus,\n  generateVideoTranslate,\n  translate,\n  VideoStatusResponse,\n  VideoTranslationStatus,\n} from 'services/translate';\n\ninterface PollParams {\n  fn: () => Promise<VideoStatusResponse>;\n  validate: (status: VideoTranslationStatus) => boolean;\n  interval: number;\n  maxAttempts: number;\n}\n\ninterface TranslationContextData {\n  textPtBr: string;\n  setTextPtBr: (text: string, fromDictionary: boolean) => Promise<string>;\n  textGloss: string;\n  setTextGloss: (text: string, fromDictionary: boolean) => void;\n  recentTranslation: string[];\n  generateVideo: () => void;\n}\n\nconst TranslationContext = createContext<TranslationContextData>(\n  {} as TranslationContextData,\n);\n\nconst poll = ({ fn, validate, interval, maxAttempts }: PollParams) => {\n  let attempts = 0;\n\n  const executePoll = async (resolve: any, reject: any) => {\n    const result = await fn();\n    attempts += 1;\n\n    if (validate(result.status)) {\n      return resolve(result);\n    }\n    if (\n      (maxAttempts && attempts === maxAttempts) ||\n      result.status === VideoTranslationStatus.FAILED\n    ) {\n      return reject(new Error('Exceeded max attempts'));\n    }\n    return setTimeout(executePoll, interval, resolve, reject);\n  };\n\n  return new Promise(executePoll);\n};\n\nconst POLL_INTERVAL = 5000;\nconst MAX_ATTEMPTS = 50;\nconst URL_API = 'https://traducao2.vlibras.gov.br/video/download';\nconst MAX_RECENTS_WORD = 30;\nconst PROPERTY_KEY = 'recents-dictionary';\n\nconst TranslationProvider: React.FC = ({ children }) => {\n  const [errorModalVisible, setErrorModalVisible] = useState(false);\n  const [loading, setLoading] = useState(false);\n  const [textPtBr, setTextPtBr] = useState('');\n  const [textGloss, setTextGloss] = useState('');\n  const [recentTranslation, setRecentTranslation] = useState<string[]>([]);\n\n  useEffect(() => {\n    NativeStorage.getItem(PROPERTY_KEY)\n      .then(recents => setRecentTranslation(recents))\n      .catch(_ => false);\n  }, []);\n\n  function handleShareVideo(uuid: string) {\n    setLoading(true);\n    // Move this function to a service [MA]\n\n    SocialSharing.share('', '', `${URL_API}/${uuid}`)\n      .catch(_ => false) // TODO: Enable error modal if fails [MA]\n      .finally(() => setLoading(false));\n  }\n\n  async function generateVideo() {\n    setLoading(true);\n    try {\n      const gloss = await translate({ text: textPtBr });\n      const response = await generateVideoTranslate({ gloss });\n      const uuid = response.requestUID as string;\n\n      poll({\n        fn: () => fetchVideoStatus(uuid),\n        validate: (status: VideoTranslationStatus) =>\n          status === VideoTranslationStatus.GENERATED,\n        interval: POLL_INTERVAL,\n        maxAttempts: MAX_ATTEMPTS,\n      })\n        .then(() => handleShareVideo(uuid))\n        .catch(() => {\n          setLoading(false);\n          setErrorModalVisible(true);\n        });\n    } catch {\n      setLoading(false);\n      setErrorModalVisible(true);\n    }\n  }\n\n  const handleTextPtBr = useCallback(\n    async (text: string, fromDictionary: boolean) => {\n      if (fromDictionary) {\n        const recents =\n          recentTranslation.length <= MAX_RECENTS_WORD\n            ? [text, ...recentTranslation.filter(item => item !== text)]\n            : [\n                text,\n                ...recentTranslation.slice(0, -1).filter(item => item !== text),\n              ];\n        setRecentTranslation(recents);\n        NativeStorage.setItem(PROPERTY_KEY, recents);\n      }\n      setTextPtBr(text);\n      try {\n        const gloss = await translate({ text });\n        setTextGloss(gloss);\n        return gloss;\n      } catch {\n        // don't need\n      }\n      return text;\n    },\n    [recentTranslation],\n  );\n\n  const handleTextGloss = useCallback(\n    async (gloss: string, fromDictionary: boolean) => {\n      if (fromDictionary) {\n        const recents =\n          recentTranslation.length <= MAX_RECENTS_WORD\n            ? [gloss, ...recentTranslation.filter(item => item !== gloss)]\n            : [\n                gloss,\n                ...recentTranslation\n                  .slice(0, -1)\n                  .filter(item => item !== gloss),\n              ];\n        setRecentTranslation(recents);\n        NativeStorage.setItem(PROPERTY_KEY, recents);\n      }\n      setTextGloss(gloss);\n    },\n    [recentTranslation],\n  );\n\n  return (\n    <TranslationContext.Provider\n      value={{\n        textPtBr,\n        textGloss,\n        setTextPtBr: handleTextPtBr,\n        setTextGloss: handleTextGloss,\n        recentTranslation,\n        generateVideo,\n      }}\n    >\n      {children}\n      <GenerateModal visible={loading} setVisible={setLoading} />\n      <ErrorModal\n        errorMsg=\"Erro ao gerar vídeo\"\n        show={errorModalVisible}\n        setShow={setErrorModalVisible}\n      />\n    </TranslationContext.Provider>\n  );\n};\n\nfunction useTranslation(): TranslationContextData {\n  const context = useContext(TranslationContext);\n\n  if (!context) {\n    throw new Error('');\n  }\n  return context;\n}\n\nexport { TranslationContext, TranslationProvider, useTranslation };\n"]},"metadata":{},"sourceType":"module"}