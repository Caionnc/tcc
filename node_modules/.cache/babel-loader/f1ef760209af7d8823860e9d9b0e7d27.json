{"ast":null,"code":"import produce from 'immer';\nimport { createAction, createAsyncAction } from 'typesafe-actions';\nimport { FIRST_PAGE_INDEX } from 'constants/pagination';\nexport const Types = {\n  SET_CURRENT_DICTIONARY: '@dictionary/SET_CURRENT_DICTIONARY',\n  GET_REQUEST: '@dicinario/GET_REQUEST',\n  GET_SUCCESS: '@dicinario/GET_SUCCESS',\n  GET_FAILURE: '@dicinario/GET_FAILURE'\n};\nconst INITIAL_STATE = {\n  words: [],\n  recents: [],\n  metadata: {},\n  loading: false\n};\nexport const Creators = {\n  setCurrentRegionalism: createAction(Types.SET_CURRENT_DICTIONARY)(),\n  fetchWords: createAsyncAction(Types.GET_REQUEST, Types.GET_SUCCESS, Types.GET_FAILURE)()\n};\n\nconst reducer = (state = INITIAL_STATE, action) => {\n  const {\n    payload,\n    type\n  } = action;\n  return produce(state, draft => {\n    switch (type) {\n      case Types.SET_CURRENT_DICTIONARY:\n        {\n          draft.words = payload;\n          break;\n        }\n\n      case Types.GET_REQUEST:\n        {\n          draft.loading = true;\n          break;\n        }\n\n      case Types.GET_SUCCESS:\n        {\n          draft.loading = false;\n          const {\n            meta,\n            data\n          } = payload;\n\n          if (meta.current_page === FIRST_PAGE_INDEX) {\n            draft.words = data;\n          } else {\n            draft.words = [...draft.words, ...data];\n          }\n\n          draft.metadata = meta;\n          break;\n        }\n\n      case Types.GET_FAILURE:\n        {\n          draft.loading = false;\n          break;\n        }\n\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;","map":{"version":3,"sources":["/home/caionnc/Documents/CC_UFPB/TCC/vlibras-mobile-cross-platform/src/store/ducks/dictionary.ts"],"names":["produce","createAction","createAsyncAction","FIRST_PAGE_INDEX","Types","SET_CURRENT_DICTIONARY","GET_REQUEST","GET_SUCCESS","GET_FAILURE","INITIAL_STATE","words","recents","metadata","loading","Creators","setCurrentRegionalism","fetchWords","reducer","state","action","payload","type","draft","meta","data","current_page"],"mappings":"AAAA,OAAOA,OAAP,MAA+B,OAA/B;AAEA,SAASC,YAAT,EAAmCC,iBAAnC,QAA4D,kBAA5D;AAEA,SAASC,gBAAT,QAAiC,sBAAjC;AA0BA,OAAO,MAAMC,KAAK,GAAG;AACnBC,EAAAA,sBAAsB,EAAE,oCADL;AAEnBC,EAAAA,WAAW,EAAE,wBAFM;AAGnBC,EAAAA,WAAW,EAAE,wBAHM;AAInBC,EAAAA,WAAW,EAAE;AAJM,CAAd;AAcP,MAAMC,aAA8B,GAAG;AACrCC,EAAAA,KAAK,EAAE,EAD8B;AAErCC,EAAAA,OAAO,EAAE,EAF4B;AAGrCC,EAAAA,QAAQ,EAAE,EAH2B;AAIrCC,EAAAA,OAAO,EAAE;AAJ4B,CAAvC;AAOA,OAAO,MAAMC,QAAQ,GAAG;AACtBC,EAAAA,qBAAqB,EAAEd,YAAY,CAACG,KAAK,CAACC,sBAAP,CAAZ,EADD;AAEtBW,EAAAA,UAAU,EAAEd,iBAAiB,CAC3BE,KAAK,CAACE,WADqB,EAE3BF,KAAK,CAACG,WAFqB,EAG3BH,KAAK,CAACI,WAHqB,CAAjB;AAFU,CAAjB;;AAWP,MAAMS,OAA8C,GAAG,CACrDC,KAAK,GAAGT,aAD6C,EAErDU,MAFqD,KAGlD;AACH,QAAM;AAAEC,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAoBF,MAA1B;AACA,SAAOnB,OAAO,CAACkB,KAAD,EAASI,KAAD,IAAmC;AACvD,YAAQD,IAAR;AACE,WAAKjB,KAAK,CAACC,sBAAX;AAAmC;AACjCiB,UAAAA,KAAK,CAACZ,KAAN,GAAcU,OAAd;AACA;AACD;;AACD,WAAKhB,KAAK,CAACE,WAAX;AAAwB;AACtBgB,UAAAA,KAAK,CAACT,OAAN,GAAgB,IAAhB;AACA;AACD;;AACD,WAAKT,KAAK,CAACG,WAAX;AAAwB;AACtBe,UAAAA,KAAK,CAACT,OAAN,GAAgB,KAAhB;AACA,gBAAM;AAAEU,YAAAA,IAAF;AAAQC,YAAAA;AAAR,cAAiBJ,OAAvB;;AACA,cAAIG,IAAI,CAACE,YAAL,KAAsBtB,gBAA1B,EAA4C;AAC1CmB,YAAAA,KAAK,CAACZ,KAAN,GAAcc,IAAd;AACD,WAFD,MAEO;AACLF,YAAAA,KAAK,CAACZ,KAAN,GAAc,CAAC,GAAGY,KAAK,CAACZ,KAAV,EAAiB,GAAGc,IAApB,CAAd;AACD;;AACDF,UAAAA,KAAK,CAACV,QAAN,GAAiBW,IAAjB;AACA;AACD;;AACD,WAAKnB,KAAK,CAACI,WAAX;AAAwB;AACtBc,UAAAA,KAAK,CAACT,OAAN,GAAgB,KAAhB;AACA;AACD;;AACD;AACE;AAzBJ;AA2BD,GA5Ba,CAAd;AA6BD,CAlCD;;AAoCA,eAAeI,OAAf","sourcesContent":["import produce, { Draft } from 'immer';\nimport { Reducer } from 'redux';\nimport { createAction, ActionType, createAsyncAction } from 'typesafe-actions';\n\nimport { FIRST_PAGE_INDEX } from 'constants/pagination';\nimport { Words } from 'models/dictionary';\n\nexport interface MetadataParams {\n  limit: number;\n  page: number;\n  name?: string;\n}\n\nexport interface Metadata {\n  current_page: number;\n  first_page: number;\n  first_page_url: string;\n  last_page: number;\n  last_page_url: string;\n  next_page_url: string;\n  per_page: number;\n  previous_page_url: string;\n  total: number;\n}\n\nexport interface ListResponseDictionary {\n  meta: Metadata;\n  data: Words[];\n}\n\nexport const Types = {\n  SET_CURRENT_DICTIONARY: '@dictionary/SET_CURRENT_DICTIONARY',\n  GET_REQUEST: '@dicinario/GET_REQUEST',\n  GET_SUCCESS: '@dicinario/GET_SUCCESS',\n  GET_FAILURE: '@dicinario/GET_FAILURE',\n};\n\nexport interface DictionaryState {\n  words: Words[];\n  recents: Words[];\n  metadata: Metadata;\n  loading: boolean;\n}\n\nconst INITIAL_STATE: DictionaryState = {\n  words: [],\n  recents: [],\n  metadata: {} as Metadata,\n  loading: false,\n};\n\nexport const Creators = {\n  setCurrentRegionalism: createAction(Types.SET_CURRENT_DICTIONARY)<string>(),\n  fetchWords: createAsyncAction(\n    Types.GET_REQUEST,\n    Types.GET_SUCCESS,\n    Types.GET_FAILURE,\n  )<MetadataParams, ListResponseDictionary, unknown>(),\n};\n\nexport type ActionTypes = ActionType<typeof Creators>;\n\nconst reducer: Reducer<DictionaryState, ActionTypes> = (\n  state = INITIAL_STATE,\n  action: ActionTypes,\n) => {\n  const { payload, type } = action;\n  return produce(state, (draft: Draft<DictionaryState>) => {\n    switch (type) {\n      case Types.SET_CURRENT_DICTIONARY: {\n        draft.words = payload;\n        break;\n      }\n      case Types.GET_REQUEST: {\n        draft.loading = true;\n        break;\n      }\n      case Types.GET_SUCCESS: {\n        draft.loading = false;\n        const { meta, data } = payload as ListResponseDictionary;\n        if (meta.current_page === FIRST_PAGE_INDEX) {\n          draft.words = data;\n        } else {\n          draft.words = [...draft.words, ...data];\n        }\n        draft.metadata = meta;\n        break;\n      }\n      case Types.GET_FAILURE: {\n        draft.loading = false;\n        break;\n      }\n      default:\n        break;\n    }\n  });\n};\n\nexport default reducer;\n"]},"metadata":{},"sourceType":"module"}