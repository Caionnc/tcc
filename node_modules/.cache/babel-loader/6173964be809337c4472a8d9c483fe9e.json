{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\n\nvar VideoEditorOriginal = function (_super) {\n  __extends(VideoEditorOriginal, _super);\n\n  function VideoEditorOriginal() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.OptimizeForNetworkUse = {\n      NO: 0,\n      YES: 1\n    };\n    _this.OutputFileType = {\n      M4V: 0,\n      MPEG4: 1,\n      M4A: 2,\n      QUICK_TIME: 3\n    };\n    return _this;\n  }\n\n  VideoEditorOriginal.prototype.transcodeVideo = function (options) {\n    return cordova(this, \"transcodeVideo\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  VideoEditorOriginal.prototype.trim = function (options) {\n    return cordova(this, \"trim\", {\n      \"callbackOrder\": \"reverse\",\n      \"platforms\": [\"iOS\"]\n    }, arguments);\n  };\n\n  VideoEditorOriginal.prototype.createThumbnail = function (options) {\n    return cordova(this, \"createThumbnail\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  VideoEditorOriginal.prototype.getVideoInfo = function (options) {\n    return cordova(this, \"getVideoInfo\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  VideoEditorOriginal.pluginName = \"VideoEditor\";\n  VideoEditorOriginal.plugin = \"cordova-plugin-video-editor\";\n  VideoEditorOriginal.pluginRef = \"VideoEditor\";\n  VideoEditorOriginal.repo = \"https://github.com/jbavari/cordova-plugin-video-editor\";\n  VideoEditorOriginal.platforms = [\"Android\", \"iOS\", \"Windows\", \"Windows Phone 8\"];\n  return VideoEditorOriginal;\n}(IonicNativePlugin);\n\nvar VideoEditor = new VideoEditorOriginal();\nexport { VideoEditor };","map":{"version":3,"sources":["../../../../src/@ionic-native/plugins/video-editor/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAO,iBAAP,EAAO,OAAP,QAAmD,oBAAnD;;;AAmJiC,EAAA,SAAA,CAAA,mBAAA,EAAiB,MAAjB,CAAA;;;;;AAC/B,IAAA,KAAA,CAAA,qBAAA,GAAwB;AACtB,MAAA,EAAE,EAAE,CADkB;AAEtB,MAAA,GAAG,EAAE;AAFiB,KAAxB;AAKA,IAAA,KAAA,CAAA,cAAA,GAAiB;AACf,MAAA,GAAG,EAAE,CADU;AAEf,MAAA,KAAK,EAAE,CAFQ;AAGf,MAAA,GAAG,EAAE,CAHU;AAIf,MAAA,UAAU,EAAE;AAJG,KAAjB;;;;AAeA,EAAA,mBAAA,CAAA,SAAA,CAAA,cAAA,GAAc,UAA0B,OAA1B,EAA0B;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,gBAAA,EAAA;AAAA,uBAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAxC;;AAaA,EAAA,mBAAA,CAAA,SAAA,CAAI,IAAJ,GAAI,UAAqB,OAArB,EAAqB;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,MAAA,EAAA;AAAA,uBAAA,SAAA;AAAA,mBAAA,CAAA,KAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAzB;;AAYA,EAAA,mBAAA,CAAA,SAAA,CAAA,eAAA,GAAe,UAAgC,OAAhC,EAAgC;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,iBAAA,EAAA;AAAA,uBAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAA/C;;AAYA,EAAA,mBAAA,CAAA,SAAA,CAAA,YAAA,GAAY,UAA6B,OAA7B,EAA6B;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,cAAA,EAAA;AAAA,uBAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAAzC;;;;;;;SA9MF,mB;EAoJiC,iB;;IAApB,WAAA,GAAA,IAAW,mBAAX,E","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\nexport interface TranscodeOptions {\n  /** The path to the video on the device. */\n  fileUri: string;\n\n  /** The file name for the transcoded video */\n  outputFileName: string;\n\n  /** Instructions on how to encode the video. Android is always mp4 */\n  outputFileType?: number;\n\n  /** Should the video be processed with quailty or speed in mind. iOS only */\n  optimizeForNetworkUse?: number;\n\n  /** Save the new video the library. Not supported in windows. Defaults to true */\n  saveToLibrary?: boolean;\n\n  /** Delete the original video. Android only. Defaults to false */\n  deleteInputFile?: boolean;\n\n  /** iOS only. Defaults to true */\n  maintainAspectRatio?: boolean;\n\n  /** Width of the result */\n  width?: number;\n\n  /** Height of the result */\n  height?: number;\n\n  /** Bitrate in bits. Defaults to 1 megabit (1000000). */\n  videoBitrate?: number;\n\n  /** Frames per second of the result. Android only. Defaults to 24. */\n  fps?: number;\n\n  /** Number of audio channels. iOS only. Defaults to 2. */\n  audioChannels?: number;\n\n  /* Sample rate for the audio. iOS only. Defaults to 44100*/\n  audioSampleRate?: number;\n\n  /** Sample rate for the audio. iOS only. Defaults to 128 kilobits (128000). */\n  audioBitrate?: number;\n\n  /** Not supported in windows, progress on the transcode. info will be a number from 0 to 100 */\n  progress?: (info: number) => void;\n}\n\nexport interface TrimOptions {\n  /** Path to input video. */\n  fileUri: string;\n\n  /** Time to start trimming in seconds */\n  trimStart: number;\n\n  /** Time to end trimming in seconds */\n  trimEnd: number;\n\n  /** Output file name */\n  outputFileName: string;\n\n  /** Progress on transcode. info will be a number from 0 to 100 */\n  progress?: (info: any) => void;\n}\n\nexport interface CreateThumbnailOptions {\n  /** The path to the video on the device */\n  fileUri: string;\n\n  /** The file name for the JPEG image */\n  outputFileName: string;\n\n  /** Location in the video to create the thumbnail (in seconds) */\n  atTime?: number;\n\n  /** Width of the thumbnail. */\n  width?: number;\n\n  /** Height of the thumbnail. */\n  height?: number;\n\n  /** Quality of the thumbnail (between 1 and 100). */\n  quality?: number;\n}\n\nexport interface GetVideoInfoOptions {\n  /** The path to the video on the device. */\n  fileUri: string;\n}\n\nexport interface VideoInfo {\n  /** Width of the video in pixels. */\n  width: number;\n\n  /** Height of the video in pixels. */\n  height: number;\n\n  /** Orientation of the video. Will be either portrait or landscape. */\n  orientation: 'portrait' | 'landscape';\n\n  /** Duration of the video in seconds. */\n  duration: number;\n\n  /** Size of the video in bytes. */\n  size: number;\n\n  /** Bitrate of the video in bits per second. */\n  bitrate: number;\n}\n\n/**\n * @name Video Editor\n * @description Edit videos using native device APIs\n *\n * @usage\n * ```typescript\n * import { VideoEditor } from '@ionic-native/video-editor/ngx';\n *\n * constructor(private videoEditor: VideoEditor) { }\n *\n * ...\n *\n * this.videoEditor.transcodeVideo({\n *   fileUri: '/path/to/input.mov',\n *   outputFileName: 'output.mp4',\n *   outputFileType: VideoEditor.OutputFileType.MPEG4\n * })\n * .then((fileUri: string) => console.log('video transcode success', fileUri))\n * .catch((error: any) => console.log('video transcode error', error));\n *\n * ```\n * @interfaces\n * TranscodeOptions\n * TrimOptions\n * CreateThumbnailOptions\n * GetVideoInfoOptions\n * VideoInfo\n */\n@Plugin({\n  pluginName: 'VideoEditor',\n  plugin: 'cordova-plugin-video-editor',\n  pluginRef: 'VideoEditor',\n  repo: 'https://github.com/jbavari/cordova-plugin-video-editor',\n  platforms: ['Android', 'iOS', 'Windows', 'Windows Phone 8'],\n})\n@Injectable()\nexport class VideoEditor extends IonicNativePlugin {\n  OptimizeForNetworkUse = {\n    NO: 0,\n    YES: 1,\n  };\n\n  OutputFileType = {\n    M4V: 0,\n    MPEG4: 1,\n    M4A: 2,\n    QUICK_TIME: 3,\n  };\n\n  /**\n   * Transcode a video\n   * @param options {TranscodeOptions} Options\n   * @returns {Promise<string>} Returns a promise that resolves to the path of the transcoded video\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n  })\n  transcodeVideo(options: TranscodeOptions): Promise<string> {\n    return;\n  }\n\n  /**\n   * Trim a video\n   * @param options {TrimOptions} Options\n   * @returns {Promise<string>} Returns a promise that resolves to the path of the trimmed video\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n    platforms: ['iOS'],\n  })\n  trim(options: TrimOptions): Promise<string> {\n    return;\n  }\n\n  /**\n   * Create a JPEG thumbnail from a video\n   * @param options {CreateThumbnailOptions} Options\n   * @returns {Promise<string>} Returns a promise that resolves to the path to the jpeg image on the device\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n  })\n  createThumbnail(options: CreateThumbnailOptions): Promise<string> {\n    return;\n  }\n\n  /**\n   * Get info on a video (width, height, orientation, duration, size, & bitrate)\n   * @param options {GetVideoInfoOptions} Options\n   * @returns {Promise<VideoInfo>} Returns a promise that resolves to an object containing info on the video\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n  })\n  getVideoInfo(options: GetVideoInfoOptions): Promise<VideoInfo> {\n    return;\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}