{"ast":null,"code":"var _jsxFileName = \"/home/caionnc/Documents/CC_UFPB/TCC/github-tcc/tcc/src/pages/Home/index.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { IonContent, IonList, IonText, IonButton, IonFooter } from '@ionic/react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router';\nimport paths from 'constants/paths';\nimport { MenuLayout } from 'layouts';\nimport PlayerService from 'services/unity';\nimport { Strings } from './strings';\nimport './styles.css';\nimport { Medication } from 'components';\nimport { addMedicationImg } from 'assets';\nimport { Creators } from 'store/ducks/medication';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst playerService = PlayerService.getService();\n\nfunction HomePage() {\n  _s();\n\n  const [searchText, setSearchText] = useState('');\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const history = useHistory();\n  const currentMedicationId = useSelector(({\n    medication\n  }) => medication.id);\n  const currentMedicationName = useSelector(({\n    medication\n  }) => medication.name);\n  const currentMedicationFrequency = useSelector(({\n    medication\n  }) => medication.frequency);\n  const currentMedicationDuration = useSelector(({\n    medication\n  }) => medication.duration);\n  const currentMedicationObservations = useSelector(({\n    medication\n  }) => medication.observation);\n  const currentMedicationData = useSelector(({\n    medication\n  }) => medication.medicationData);\n  const currentMedicationList = useSelector(({\n    medication\n  }) => medication.medicationList); //Medication Modal\n  //const [showModal, setShowModal] = useState(false);\n  //Medication List state\n\n  const [medicationList, setMedicationList] = useState([]);\n  const [medicationName, setMedicationName] = useState(currentMedicationName);\n  const [medicationFrequency, setmedicationFrequency] = useState(currentMedicationFrequency);\n  const [medicationDuration, setMedicationDuration] = useState(currentMedicationDuration);\n  const [medicationObservations, setMedicationObervations] = useState(currentMedicationObservations);\n  const [medicationListTest, setMedicationListTest] = useState([]);\n  const [medicationNameTest, setMedicationNameTest] = useState(currentMedicationName);\n  const [medicationFrequencyTest, setmedicationFrequencyTest] = useState(currentMedicationFrequency);\n  const [medicationDurationTest, setMedicationDurationTest] = useState(currentMedicationDuration);\n  const [medicationObservationsTest, setMedicationDoObservations] = useState(currentMedicationObservations); //FIXED HOME MEDICATION\n\n  const testMedication = {\n    id: currentMedicationId,\n    name: currentMedicationName,\n    frequency: currentMedicationFrequency,\n    duration: currentMedicationDuration,\n    observation: currentMedicationObservations,\n    medicationData: `${currentMedicationId + ' ' + currentMedicationName + ' ' + currentMedicationFrequency + ' ' + currentMedicationDuration + ' ' + currentMedicationObservations + ' '}`\n  };\n\n  const addMedication = () => {\n    const newMedication = {\n      id: currentMedicationId,\n      name: currentMedicationName,\n      frequency: currentMedicationFrequency,\n      duration: currentMedicationDuration,\n      observation: currentMedicationObservations,\n      medicationData: `${currentMedicationId + ' ' + currentMedicationName + ' ' + currentMedicationFrequency + ' ' + currentMedicationDuration + ' ' + currentMedicationObservations + ' '}`\n    };\n    setMedicationName(currentMedicationName);\n    setmedicationFrequency(currentMedicationFrequency);\n    setMedicationDuration(currentMedicationDuration);\n    setMedicationObervations(currentMedicationObservations);\n    dispatch(Creators.setCurrentMedicationList(newMedication)); //only for test\n\n    setMedicationList([...medicationList, newMedication]);\n    console.log(currentMedicationList);\n    console.log(medicationList);\n  };\n\n  const deleteMedication = medicationToBeDeleted => {\n    dispatch(Creators.setCurrentMedicationList(setMedicationList(currentMedicationList.filter(medication => {\n      return medication.name !== medicationToBeDeleted;\n    }))));\n    /* setMedicationList(\n      medicationList.filter(medication => {\n        return medication.name !== medicationToBeDeleted;\n      }),\n    ); */\n  };\n\n  return /*#__PURE__*/_jsxDEV(MenuLayout, {\n    title: Strings.TOOLBAR_TITLE,\n    mode: location.pathname === paths.DICTIONARY ? 'menu' : 'menu',\n    children: [/*#__PURE__*/_jsxDEV(IonContent, {\n      class: \"home-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"home-content\",\n        children: [/*#__PURE__*/_jsxDEV(IonText, {\n          class: \"home-content-title\",\n          children: \"Medicamentos\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Medication, {\n          medication: testMedication,\n          deleteMedication: deleteMedication\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(IonList, {\n          class: \"home-medication-list\",\n          children: currentMedicationList.map((item, key) => /*#__PURE__*/_jsxDEV(Medication, {\n            medication: item,\n            deleteMedication: deleteMedication\n          }, key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 210,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"home-add-medication-div\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"home-add-medicine-button\",\n        onClick: addMedication,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: addMedicationImg,\n          alt: \"\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(IonFooter, {\n      class: \"home-bottom-container\",\n      children: /*#__PURE__*/_jsxDEV(IonButton, {\n        onClick: () => console.log('Traduzir bundle'),\n        children: \"Traduzir\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 199,\n    columnNumber: 5\n  }, this);\n}\n\n_s(HomePage, \"d2Dbnlu0lqlwtwDzfEgRbWMzwEw=\", false, function () {\n  return [useLocation, useDispatch, useHistory, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector, useSelector];\n});\n\n_c = HomePage;\nexport default HomePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"HomePage\");","map":{"version":3,"sources":["/home/caionnc/Documents/CC_UFPB/TCC/github-tcc/tcc/src/pages/Home/index.tsx"],"names":["React","useState","IonContent","IonList","IonText","IonButton","IonFooter","useDispatch","useSelector","useHistory","useLocation","paths","MenuLayout","PlayerService","Strings","Medication","addMedicationImg","Creators","playerService","getService","HomePage","searchText","setSearchText","location","dispatch","history","currentMedicationId","medication","id","currentMedicationName","name","currentMedicationFrequency","frequency","currentMedicationDuration","duration","currentMedicationObservations","observation","currentMedicationData","medicationData","currentMedicationList","medicationList","setMedicationList","medicationName","setMedicationName","medicationFrequency","setmedicationFrequency","medicationDuration","setMedicationDuration","medicationObservations","setMedicationObervations","medicationListTest","setMedicationListTest","medicationNameTest","setMedicationNameTest","medicationFrequencyTest","setmedicationFrequencyTest","medicationDurationTest","setMedicationDurationTest","medicationObservationsTest","setMedicationDoObservations","testMedication","addMedication","newMedication","setCurrentMedicationList","console","log","deleteMedication","medicationToBeDeleted","filter","TOOLBAR_TITLE","pathname","DICTIONARY","map","item","key"],"mappings":"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","sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\n\nimport {\n  IonChip,\n  IonContent,\n  IonItem,\n  IonList,\n  IonSearchbar,\n  IonText,\n  IonInfiniteScroll,\n  IonInfiniteScrollContent,\n  IonIcon,\n  IonImg,\n  IonBackButton,\n  IonButton,\n  IonFooter,\n} from '@ionic/react';\nimport { debounce, indexOf } from 'lodash';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useHistory, useLocation } from 'react-router';\n\nimport {\n  FIRST_PAGE_INDEX,\n  MAX_PER_PAGE,\n  PAGE_STEP_SIZE,\n} from 'constants/pagination';\nimport paths from 'constants/paths';\nimport { PlayerKeys } from 'constants/player';\nimport { useTranslation } from 'hooks/Translation';\nimport { MenuLayout } from 'layouts';\nimport { Words } from 'models/dictionary';\nimport PlayerService from 'services/unity';\nimport { RootState } from 'store';\n\nimport { Strings } from './strings';\n\nimport './styles.css';\nimport { Medication } from 'components';\nimport { addMedicationImg } from 'assets';\nimport { Creators } from 'store/ducks/medication';\n\nconst playerService = PlayerService.getService();\n\nexport interface IMedication {\n  name: any;\n  frequency: any;\n  duration: any;\n  observations: any;\n}\n\nexport interface MedicationListState {\n  id: number;\n  name: string;\n  frequency: string;\n  duration: string;\n  observation: string;\n  medicationData: string;\n}\n\nfunction HomePage() {\n  const [searchText, setSearchText] = useState('');\n  const location = useLocation();\n  const dispatch = useDispatch();\n  const history = useHistory();\n\n  const currentMedicationId = useSelector(\n    ({ medication }: RootState) => medication.id,\n  );\n\n  const currentMedicationName = useSelector(\n    ({ medication }: RootState) => medication.name,\n  );\n\n  const currentMedicationFrequency = useSelector(\n    ({ medication }: RootState) => medication.frequency,\n  );\n\n  const currentMedicationDuration = useSelector(\n    ({ medication }: RootState) => medication.duration,\n  );\n\n  const currentMedicationObservations = useSelector(\n    ({ medication }: RootState) => medication.observation,\n  );\n\n  const currentMedicationData = useSelector(\n    ({ medication }: RootState) => medication.medicationData,\n  );\n\n  const currentMedicationList = useSelector(\n    ({ medication }: RootState) => medication.medicationList,\n  );\n\n  //Medication Modal\n  //const [showModal, setShowModal] = useState(false);\n\n  //Medication List state\n  const [medicationList, setMedicationList] = useState<MedicationListState[]>(\n    [],\n  );\n  const [medicationName, setMedicationName] = useState<any>(\n    currentMedicationName,\n  );\n  const [medicationFrequency, setmedicationFrequency] = useState<any>(\n    currentMedicationFrequency,\n  );\n  const [medicationDuration, setMedicationDuration] = useState<any>(\n    currentMedicationDuration,\n  );\n  const [medicationObservations, setMedicationObervations] = useState<any>(\n    currentMedicationObservations,\n  );\n\n  const [medicationListTest, setMedicationListTest] = useState<IMedication[]>(\n    [],\n  );\n  const [medicationNameTest, setMedicationNameTest] = useState<string>(\n    currentMedicationName,\n  );\n  const [medicationFrequencyTest, setmedicationFrequencyTest] = useState<any>(\n    currentMedicationFrequency,\n  );\n  const [medicationDurationTest, setMedicationDurationTest] = useState<any>(\n    currentMedicationDuration,\n  );\n  const [medicationObservationsTest, setMedicationDoObservations] =\n    useState<any>(currentMedicationObservations);\n\n  //FIXED HOME MEDICATION\n  const testMedication = {\n    id: currentMedicationId,\n    name: currentMedicationName,\n    frequency: currentMedicationFrequency,\n    duration: currentMedicationDuration,\n    observation: currentMedicationObservations,\n    medicationData: `${\n      currentMedicationId +\n      ' ' +\n      currentMedicationName +\n      ' ' +\n      currentMedicationFrequency +\n      ' ' +\n      currentMedicationDuration +\n      ' ' +\n      currentMedicationObservations +\n      ' '\n    }`,\n  };\n\n  const addMedication = (): void => {\n    const newMedication: MedicationListState = {\n      id: currentMedicationId,\n      name: currentMedicationName,\n      frequency: currentMedicationFrequency,\n      duration: currentMedicationDuration,\n      observation: currentMedicationObservations,\n      medicationData: `${\n        currentMedicationId +\n        ' ' +\n        currentMedicationName +\n        ' ' +\n        currentMedicationFrequency +\n        ' ' +\n        currentMedicationDuration +\n        ' ' +\n        currentMedicationObservations +\n        ' '\n      }`,\n    };\n\n    setMedicationName(currentMedicationName);\n    setmedicationFrequency(currentMedicationFrequency);\n    setMedicationDuration(currentMedicationDuration);\n    setMedicationObervations(currentMedicationObservations);\n    dispatch(Creators.setCurrentMedicationList(newMedication));\n    //only for test\n    setMedicationList([...medicationList, newMedication]);\n\n    console.log(currentMedicationList);\n    console.log(medicationList);\n\n  };\n\n  const deleteMedication = (medicationToBeDeleted: string): void => {\n    dispatch(Creators.setCurrentMedicationList(setMedicationList(\n      currentMedicationList.filter(medication => {\n        return medication.name !== medicationToBeDeleted;\n      }),\n    )));\n    \n    /* setMedicationList(\n      medicationList.filter(medication => {\n        return medication.name !== medicationToBeDeleted;\n      }),\n    ); */\n  };\n\n  return (\n    <MenuLayout\n      title={Strings.TOOLBAR_TITLE}\n      mode={location.pathname === paths.DICTIONARY ? 'menu' : 'menu'}\n    >\n      <IonContent class=\"home-container\">\n        <div className=\"home-content\">\n          <IonText class=\"home-content-title\">Medicamentos</IonText>\n          <Medication\n            medication={testMedication}\n            deleteMedication={deleteMedication}\n          ></Medication>\n          <IonList class=\"home-medication-list\">\n            {currentMedicationList.map((item: MedicationListState, key: number) => (\n              <Medication\n                key={key}\n                medication={item}\n                deleteMedication={deleteMedication}\n              ></Medication>\n            ))}\n          </IonList>\n        </div>\n      </IonContent>\n      <div className=\"home-add-medication-div\">\n        <button className=\"home-add-medicine-button\" onClick={addMedication}>\n          <img src={addMedicationImg} alt=\"\" />\n        </button>\n      </div>\n      <IonFooter class=\"home-bottom-container\">\n        <IonButton onClick={() => console.log('Traduzir bundle')}>\n          Traduzir\n        </IonButton>\n      </IonFooter>\n    </MenuLayout>\n  );\n}\n\nexport default HomePage;\n"]},"metadata":{},"sourceType":"module"}